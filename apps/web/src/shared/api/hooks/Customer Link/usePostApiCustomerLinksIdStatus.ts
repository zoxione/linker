/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

import client from "../../../lib/fetch-client";
import type { RequestConfig, ResponseErrorConfig } from "../../../lib/fetch-client";
import type {
  PostApiCustomerLinksIdStatusMutationRequest,
  PostApiCustomerLinksIdStatusMutationResponse,
  PostApiCustomerLinksIdStatusPathParams,
  PostApiCustomerLinksIdStatus400,
} from "../../types/Customer Link/PostApiCustomerLinksIdStatus";

export const postApiCustomerLinksIdStatusMutationKey = () => [{ url: "/api/customer/links/{id}/status" }] as const;

export type PostApiCustomerLinksIdStatusMutationKey = ReturnType<typeof postApiCustomerLinksIdStatusMutationKey>;

/**
 * @summary Обновить статус ссылки по id
 * {@link /api/customer/links/:id/status}
 */
export async function postApiCustomerLinksIdStatus(
  id: PostApiCustomerLinksIdStatusPathParams["id"],
  data: PostApiCustomerLinksIdStatusMutationRequest,
  config: Partial<RequestConfig<PostApiCustomerLinksIdStatusMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    PostApiCustomerLinksIdStatusMutationResponse,
    ResponseErrorConfig<PostApiCustomerLinksIdStatus400>,
    PostApiCustomerLinksIdStatusMutationRequest
  >({ method: "POST", url: `/api/customer/links/${id}/status`, data, ...requestConfig });
  return res.data;
}

/**
 * @summary Обновить статус ссылки по id
 * {@link /api/customer/links/:id/status}
 */
export function usePostApiCustomerLinksIdStatus<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostApiCustomerLinksIdStatusMutationResponse,
      ResponseErrorConfig<PostApiCustomerLinksIdStatus400>,
      { id: PostApiCustomerLinksIdStatusPathParams["id"]; data: PostApiCustomerLinksIdStatusMutationRequest },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<PostApiCustomerLinksIdStatusMutationRequest>> & { client?: typeof client };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? postApiCustomerLinksIdStatusMutationKey();

  return useMutation<
    PostApiCustomerLinksIdStatusMutationResponse,
    ResponseErrorConfig<PostApiCustomerLinksIdStatus400>,
    { id: PostApiCustomerLinksIdStatusPathParams["id"]; data: PostApiCustomerLinksIdStatusMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ id, data }) => {
        return postApiCustomerLinksIdStatus(id, data, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
