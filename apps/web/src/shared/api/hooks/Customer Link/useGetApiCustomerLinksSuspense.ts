/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

import client from "../../../lib/fetch-client";
import type { RequestConfig, ResponseErrorConfig } from "../../../lib/fetch-client";
import type {
  GetApiCustomerLinksQueryResponse,
  GetApiCustomerLinksQueryParams,
  GetApiCustomerLinks400,
} from "../../types/Customer Link/GetApiCustomerLinks";

export const getApiCustomerLinksSuspenseQueryKey = (params?: GetApiCustomerLinksQueryParams) =>
  [{ url: "/api/customer/links" }, ...(params ? [params] : [])] as const;

export type GetApiCustomerLinksSuspenseQueryKey = ReturnType<typeof getApiCustomerLinksSuspenseQueryKey>;

/**
 * @summary Получить ссылки
 * {@link /api/customer/links}
 */
export async function getApiCustomerLinksSuspense(
  params?: GetApiCustomerLinksQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<GetApiCustomerLinksQueryResponse, ResponseErrorConfig<GetApiCustomerLinks400>, unknown>({
    method: "GET",
    url: `/api/customer/links`,
    params,
    ...requestConfig,
  });
  return res.data;
}

export function getApiCustomerLinksSuspenseQueryOptions(
  params?: GetApiCustomerLinksQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getApiCustomerLinksSuspenseQueryKey(params);
  return queryOptions<
    GetApiCustomerLinksQueryResponse,
    ResponseErrorConfig<GetApiCustomerLinks400>,
    GetApiCustomerLinksQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getApiCustomerLinksSuspense(params, config);
    },
  });
}

/**
 * @summary Получить ссылки
 * {@link /api/customer/links}
 */
export function useGetApiCustomerLinksSuspense<
  TData = GetApiCustomerLinksQueryResponse,
  TQueryKey extends QueryKey = GetApiCustomerLinksSuspenseQueryKey,
>(
  params?: GetApiCustomerLinksQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetApiCustomerLinksQueryResponse,
        ResponseErrorConfig<GetApiCustomerLinks400>,
        TData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getApiCustomerLinksSuspenseQueryKey(params);

  const query = useSuspenseQuery(
    {
      ...(getApiCustomerLinksSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, "queryKey">),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetApiCustomerLinks400>> & { queryKey: TQueryKey };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
